
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {url='https://repo.spongepowered.org/repository/maven-public/'}
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
	// this version works on gradle 4.9
	// more recent versions of shadow work on more recent versions of gradle
	id 'com.github.johnrengelman.shadow' version '7.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${mod_version}"
group = "commoble.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}-${mc_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
	main
//	api
	test
	datagen
	generated
}

sourceSets.main.resources { srcDirs += sourceSets.generated.resources.srcDirs }

minecraft {
    mappings channel: 'official', version: "${mappings_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'
            arg "-mixin.config="+"morered"+".mixins.json"

            mods {
                morered {
                    source sourceSets.main
//					source sourceSets.api
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'
            arg "-mixin.config="+"morered"+".mixins.json"

            mods {
                morered {
                    source sourceSets.main
//					source sourceSets.api
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            properties 'mixin.env.disableRefMap': 'true'
            arg "-mixin.config="+"morered"+".mixins.json"

            args '--mod', 'morered-datagen', '--all', '--output', file('src/generated/resources/')

            mods {
                "morered-datagen"
                {
					source sourceSets.datagen
                }
                morered {
                    source sourceSets.main
//					source sourceSets.api
                }
            }
        }
    }
}

configurations {
	shade
//	apiCompile.extendsFrom(compile)
	debugCompile.extendsFrom(compile)
}

repositories {
	// jei maven and backup maven
	maven {url = "https://dvs1.progwml6.com/files/maven/"}
	maven {url = "https://modmaven.dev"}
	// repos for mixin
	mavenCentral()
	// repo for databuddy
	maven { url "https://cubicinterpolation.net/maven/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

//	implementation sourceSets.api.output
    
    // jei
	compileOnly fg.deobf("mezz.jei:jei-${jei_branch}:${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${jei_branch}:${jei_version}")

	// junit dependencies
	testImplementation('org.junit.jupiter:junit-jupiter:5.6.2')
	
	// databuddy shadowjar
	implementation fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
	shade fg.deobf("commoble.databuddy:${databuddy_branch}:${databuddy_version}")
	
//	compileOnly fg.deobf("commoble.bagofyurting:${bagofyurting_branch}:${bagofyurting_version}:api")
//	runtimeOnly fg.deobf("commoble.bagofyurting:${bagofyurting_branch}:${bagofyurting_version}")
	
	// cram dependencies
	//compileOnly fg.deobf("commoble.cram:${cram_branch}:${cram_version}:debug")
	//runtimeOnly fg.deobf("commoble.cram:${cram_branch}:${cram_version}")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

test {
	useJUnitPlatform()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	// regular jar gets overwritten by shadowjar
	// the froms from the shadowjar block are used instead of this block's froms
	// but the manifest attribtues here are still used
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

shadowJar {
	classifier = ''
	configurations = [project.configurations.shade]
	relocate 'commoble.databuddy', "${project.group}.shadow.commoble.databuddy"
//	from sourceSets.api.output
}

reobf {
    shadowJar { }
}
// this replaces jar.finalizedBy('reobfJar') in the standard forge mod buildscript
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
	from sourceSets.main.allJava
//	from sourceSets.api.allJava
}
//task apiJar(type: Jar) {
//    archiveClassifier.set("api")
//	from sourceSets.api.output
//	from sourceSets.api.allJava
//	// exclude api internals from canonical public api
//	exclude "commoble/morered/api/internal/"
//}

// full production jar plus attached sources for debugging
task debugJar(type: Jar) {
	classifier = "debug"
	from sourceSets.main.output
	from sourceSets.main.allJava
//	from sourceSets.api.output
//	from sourceSets.api.allJava
	// we have to exclude this from the compileOnly dependency,
	// or mixins from this mod don't apply when we run the depending mod, weirdly
	exclude "META-INF/mods.toml"
}

artifacts {
    archives jar, sourcesJar, javadocJar
//	archives javadocJar
//	archives sourcesJar
//	archives apiJar
//	archives debugJar
}

// run "gradlew_old build publish" to build jars and generate a maven repo for them
// run "gradlew_old build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
//			artifact apiJar
			artifact sourcesJar
			//artifact javadocJar
			artifact debugJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "${modid}.refmap.json"
}