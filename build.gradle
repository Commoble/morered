plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "7.0.+"
}

group = "net.commoble.${modid}"
base { archivesName="${modid}-${mc_version}" }
version = "${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets
{
	main
	gametest
	datagen
	generated
}

// include resources generated from datagen in main
sourceSets.main.resources { srcDir 'src/generated/resources' }

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	configureEach {
		systemProperty 'forge.logging.console.level', 'debug'
		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.modid
	}
	
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.modid
    }

    data {
        programArguments.addAll '--mod', "morered_datagen", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

repositories {
	mavenCentral()
	maven {url = "https://maven.blamejared.com/"}
	maven {url = "https://cubicinterpolation.net/maven/"}
	maven {url = "https://maven.terraformersmc.com"}
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
	compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
	compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
	// at runtime, use the full JEI jar for NeoForge
	//runtimeOnly "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"
	
	compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
	runtimeOnly "dev.emi:emi-neoforge:${emi_version}"
}

java
{
	withSourcesJar()
	withJavadocJar()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modid}",
            "Specification-Vendor": "Commoble",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Commoble",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

// run "gradlew build publish" to build jars and generate a maven repo for them
// run "gradlew build" to build the jars without mavening them
publishing {
    publications {
        mavenJava(MavenPublication) {
			artifactId project.archivesBaseName
            artifact jar
			artifact sourcesJar
			artifact javadocJar
        }
    }
    repositories {
        maven {
			name="localMaven"
            url "file:///${project.projectDir}/maven"
        }
    }
}
